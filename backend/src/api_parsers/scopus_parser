from src.api_handlers.scopus.handler import ScopusHandler
from src.api_parsers.models import Source, Publication, Author
import json


class ScopusParser:
    def __init__(self, keywords: str):
        self.keywords = keywords
        self.handler = ScopusHandler()

    def get_authors(self):
        pub_params = {
            'query': f'TITLE-ABS-KEY({self.keywords})',
            'view': 'COMPLETE',
        }
        pub_response = self.handler.get_abstracts_and_citations(params=pub_params)
        # TODO: handle a case with no results
        authors: list[Author] = []
        for page in pub_response:
            authors.extend(_parse_publications_page(page))
        print('\n\n', authors)


def _parse_publications_page(page: dict):
    authors: list[Author] = []
    entries = page['search-results']['entry']
    for entry in entries:
        authors.extend(_parse_entry_dict(entry))
    return authors


def _parse_entry_dict(entry: dict):
    authors: list[Author] = []
    pub_data = {
        'title': entry['dc:title'],
        'abstract': entry['dc:description'],
        'citations': entry['citedby-count'],
        'source_api': Source.SCOPUS,
    }
    publication = Publication(**pub_data)
    if 'author' not in entry:
        return []
    authors_list = entry['author']
    for author in authors_list:
        auth_data = {
            'name': author['given-name'] + ' ' + author['surname'],
            'api_id': author['authid'],
            'publication': publication,
        }
        a = Author(**auth_data)
        print(a)
        authors.append(a)
    return authors



scopus = ScopusParser('code smells')
scopus.get_authors()
